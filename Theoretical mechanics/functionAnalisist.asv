%% Универсальный анализ символьной функции в MATLAB

% 1. Очистка и подготовка
clc; clearvars; close all;
% (sympref('TypesetOutput', true);  % при желании для красивого вывода в Live Script)

% 2. Задание символьной переменной и функции
syms x real
syms f(x)

% === Замените следующую строку на любую вашу функцию ===
f(x) = (2*x^2 - 4*x + 7)/(x + 3);
% ========================================================

fprintf("Анализ функции f(x) = %s\n\n", char(f(x)));

% 3. Область определения
[Num, Den] = numden(f(x));
singular = solve(Den == 0, x);
fprintf("1) Область определения: ");
if isempty(singular)
    fprintf("весь R\n\n");
else
    fprintf("R \\ { %s }\n\n", strjoin(string(singular), ", "));
end

% 4. Чётность/нечётность
evenFun = simplify(f(x) - f(-x)) == 0;
oddFun  = simplify(f(x) + f(-x)) == 0;
fprintf("2) Чётность/нечётность: ");
if evenFun
    fprintf("чётная\n\n");
elseif oddFun
    fprintf("нечётная\n\n");
else
    fprintf("общего вида\n\n");
end

% 5. Пересечения с осями
%   Ox: f(x)=0
rootsOx = solve(f(x)==0, x);
fprintf("3) Пересечения с Ox: ");
if isempty(rootsOx)
    fprintf("нет\n");
else
    fprintf("x = %s\n", strjoin(string(rootsOx), ", "));
end
%   Oy: x=0
valOy = subs(f(x), x, 0);
fprintf("   Пересечение с Oy: ");
if isfinite(double(valOy))
    fprintf("(0, %s)\n\n", char(valOy));
else
    fprintf("нет\n\n");
end

% 6. Промежутки знакопостоянства
I_pos1 = solve(Num > 0, x);
I_pos2 = solve(Den > 0, x);
I_neg1 = solve(Num < 0, x);
I_neg2 = solve(Den < 0, x);
posInterval = union(intersect(I_pos1,I_pos2), intersect(I_neg1,I_neg2));
negInterval = union(intersect(I_pos1,I_neg2), intersect(I_neg1,I_pos2));
if ~isempty(posInterval)
    fprintf("4) f(x) > 0 на: %s\n", strjoin(string(posInterval), ", "));
end
if ~isempty(negInterval)
    fprintf("   f(x) < 0 на: %s\n\n", strjoin(string(negInterval), ", "));
end

% 7. Возрастание, убывание и экстремумы
f1 = diff(f(x), x);
upInt   = solve(f1 > 0, x);
downInt = solve(f1 < 0, x);
extPts  = solve(f1 == 0, x);
fprintf("5) Интервалы возрастания: %s\n",    strjoin(string(upInt), ", "));
fprintf("   Интервалы убывания:   %s\n",    strjoin(string(downInt), ", "));
fprintf("   Критические точки (f'=0): %s\n\n", strjoin(string(extPts), ", "));

% 8. Выпуклость, вогнутость и точки перегиба
f2 = diff(f1, x);
convInt = solve(f2 < 0, x);
concInt = solve(f2 > 0, x);
inflPts = solve(f2 == 0, x);
fprintf("6) Промежутки выпуклости (f''<0): %s\n", strjoin(string(convInt), ", "));
fprintf("   Промежутки вогнутости (f''>0): %s\n", strjoin(string(concInt), ", "));
fprintf("   Точки перегиба (f''=0): %s\n\n", strjoin(string(inflPts), ", "));

% 9. Наклонная асимптота
K = limit(f(x)/x, x, Inf);
B = limit(f(x) - K*x, x, Inf);
if ~(isequal(K,[]) && isequal(B,[]))
    fprintf("7) Наклонная асимптота: y = %s*x + %s\n\n", char(K), char(B));
else
    fprintf("7) Асимптота отсутствует\n\n");
end

% 10. Построение графика
figure('Name','График f(x) и асимптота','NumberTitle','off');
hold on, grid on;
% диапазон можно менять руками
xMin = double(min(singular)-5); 
xMax = double(max(singular)+5);
if isempty(singular), xMin = -10; xMax = 10; end
fplot(f, [xMin, xMax], 'LineWidth', 2, 'Color', 'r');
if ~(isequal(K,[]) && isequal(B,[]))
    asymp = matlabFunction(K*x + B);
    fplot(asymp, [xMin, xMax], '--b', 'LineWidth', 1.5);
end
xlabel('x'); ylabel('f(x)');
title(['График f(x) = ', char(f(x))]);
legend('f(x)','Асимптота','Location','best');
hold off;
