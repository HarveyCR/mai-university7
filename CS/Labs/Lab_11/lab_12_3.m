% Решение уравнения exp(x) + log(x) - 10*x = 0 методом Ньютона
% с итеративным и рекурсивным подходами
%
% Начальные параметры:
tol = 1e-6;         % Допустимая погрешность
max_iter = 100;     % Максимальное число итераций
x0 = 5.00;          % Начальное приближение

%% Итеративная реализация метода Ньютона

fprintf('--- Итеративная реализация метода Ньютона ---\n');
x_iter = x0;  % задаём начальное приближение
for k = 1:max_iter
    % Вычисляем значение функции и её производной
    f_val = exp(x_iter) + log(x_iter) - 10*x_iter;
    df_val = exp(x_iter) + 1/x_iter - 10;
    
    % Формула Ньютона
    x_next = x_iter - f_val/df_val;
    
    fprintf('Итерация %d: x = %.6f\n', k, x_next);
    
    % Проверка условия сходимости
    if abs(x_next - x_iter) < tol
        break;
    end
    x_iter = x_next;
end
fprintf('Приближённое значение корня (итеративно): %.6f\n\n', x_next);

%% Рекурсивная реализация метода Ньютона

fprintf('--- Рекурсивная реализация метода Ньютона ---\n');
% Вызов рекурсивной функции newtonRecursive
[root, rec_iter] = newtonRecursive(x0, tol, max_iter, 0);
fprintf('Приближённое значение корня (рекурсивно): %.6f найдено за %d итераций\n', root, rec_iter);

%% Рекурсивная функция метода Ньютона
function [x_new, count] = newtonRecursive(x, tol, max_iter, count)
    % Функция вычисляет приближение корня уравнения методом Ньютона рекурсивно.
    %
    % Входные параметры:
    %   x         - текущее приближение
    %   tol       - требуемая точность
    %   max_iter  - максимальное число итераций
    %   count     - текущий счетчик итераций
    %
    % Выходные параметры:
    %   x_new     - новое приближение корня
    %   count     - общее число выполненных итераций

    % Вычисляем значение функции и её производной
    f_val = exp(x) + log(x) - 10*x;
    df_val = exp(x) + 1/x - 10;
    
    % Формула обновления Ньютона
    x_new = x - f_val / df_val;
    count = count + 1;
    
    % Проверка условия сходимости или достижения максимума итераций
    if abs(x_new - x) < tol || count >= max_iter
        return;
    else
        % Рекурсивный вызов функции
        [x_new, count] = newtonRecursive(x_new, tol, max_iter, count);
    end
end
